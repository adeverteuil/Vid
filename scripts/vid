#!/usr/bin/python3
# vim:cc=80:fdm=marker:fdl=0:fdc=1
#
# vid
# Copyright Â© 2013  Alexandre de Verteuil        {{{1
#
# This file is part of Vid.
#
# Vid is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# Vid is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#}}}


# Imports                                        {{{1
import os
import sys
import time
import queue
import os.path
import logging
import datetime
import argparse
import textwrap
import subprocess

import yaml

from vid import *


# Global variables                               {{{1

# The default file path name pattern is successively overriden by:
# 1. The VID_PATTERN environment variable,
# 2. A file named .vid_pattern in the current working directory,
# 3. The "pattern" variable in the "globals" section of the .yaml file,
# 4. The -p command line argument,
# 5. The "pattern" key of a shot description in the "movie" section of the
#    .yaml file.
# Here is 1 and 2:
DEFAULT_PATTERN = os.getenv('VID_PATTERN', DEFAULT_PATTERN)
if os.path.isfile(".vid_pattern"):
    with open(".vid_pattern") as f:
        DEFAULT_PATTERN = f.readline().strip()
#}}}


def _parse_args(args=None):                      #{{{1
    """Build argument parsers and parse arguments.

    If args list is provided, use it. Otherwise, parse sys.argv[1:].
    """
    args = args if args is not None else sys.argv[1:]
    # Create the top-level parser.
    parser = argparse.ArgumentParser(
        description="A CLI video editor.",
        )
    parser.add_argument("-p", "--pattern",
        type=str,
        help="the file path name pattern, as a Python format string",
        )
    subparsers = parser.add_subparsers(help="vid expects a sub-command:")

    # Create the parser for the "play" command.
    parser_play = subparsers.add_parser("play",
        help="find a file by it's number and play it",
        )
    parser_play.set_defaults(func=play)
    parser_play.add_argument("file_number",
        type=int,
        help="the number of the media file to read",
        )
    parser_play.add_argument("seek",
        type=float, nargs="?", default=0,
        help="the timecode to seek to",
        )
    parser_play.add_argument("duration",
        type=float, nargs="?", default=None,
        help="the duration for which to play for",
        )
    parser_play.add_argument("-o", "--output",
        help=("the file name to which to save the preview; "
              "the file extension specifies the container format"),
            )

    # Create the parser for the "yaml" command.
    parser_yaml = subparsers.add_parser("yaml",
        help="read YAML file, play or write a video file",
        )
    parser_yaml.set_defaults(func=play_yaml)
    parser_yaml.add_argument("file_name",
        type=str, help="the YAML file to read",
        )
    parser_yaml.add_argument("-s", "--showinfo",
        action="store_true",
        help="burn filenames and timecode information on the video",
        )
    parser_yaml.add_argument("-o", "--output",
        action="append",
        help=("if one or more output option is given, write video "
              "to the given filename, encoded in the formats derived "
              "from the filenames extensions"),
        )
    parser_yaml.add_argument("-b", "--bell",
        action="store_true",
        help="produce a beep when encoding is finished",
        )

    # Create the subparser for the "new" command.
    parser_new = subparsers.add_parser("new",
        help="write a template YAML file with helpful comments to stdout",
        )
    parser_new.set_defaults(func=new_movie)

    # Parse argument list, return gathered Namespace object.
    parsed_args =  parser.parse_args(args)
    if 'func' not in parsed_args:
        parser.error("Subcommand missing.")
    return parsed_args


def play(args):                                  #{{{1
    """Play the requested file using inv.utils objects."""
    logger = logging.getLogger(__name__+".play")
    print("Play file number", args.file_number)
    print("Start at", args.seek, end=" ")
    if args.duration:
        print("for", args.duration, "seconds.")
    else:
        print("until EOF.")
    try:
        shot = Shot(
            args.file_number, args.seek, args.duration,
            pattern=args.pattern or DEFAULT_PATTERN,
            )
        shot.add_filter("showdata")
        shot.demux()
        muxer = Multiplexer(shot.v_stream, shot.a_stream)
        muxer.add_filter("showdata", length=shot.get_duration())
        if args.output:
            print("Writing to", args.output)
            try:
                muxer.write_to_files(args.output)
            except KeyError:
                logger.error(
                    "Invalid file extension. Please choose among {}.".format(
                        ", ".join(OUTPUT_FORMATS.keys())
                        )
                    )
                return
        else:
            player = Player(muxer.mux())
            player.process.wait()
        muxer.process.wait()
        shot.a_process.wait()
        shot.v_process.wait()
    except FileNotFoundError:
        logger.error("Couldn't find file number {}.".format(args.file_number))


def play_yaml(options):                          #{{{1
    """Interpret YAML and play the result."""
    logger = logging.getLogger(__name__+".play_yaml")
    print("Play", options.file_name)
    # Read YAML
    data = YAMLReader().load(options.file_name)
    # Create pipe to connect ConcatenateShots object with Multiplexer.
    # Closing the file descriptors is taken care of by these objects.
    fvr, fvw = os.pipe()
    vr = open(fvr, "rb")
    vw = open(fvw, "wb")
    far, faw = os.pipe()
    ar = open(far, "rb")
    aw = open(faw, "wb")
    q = queue.Queue()
    cat = ConcatenateShots(q, vw, aw)
    # Optionnaly mix in the music.
    if 'music' in data:
        print("Mixing music file", data['music'])
        mixer = AudioProcessing(ar)
        mixer.mix(data['music'])
        ar = mixer.output_audio
    muxer = Multiplexer(vr, ar)
    # Interpret YAML data, build the movie.
    length = 0
    for argslist in data['movie']:
        args = []
        if 'globals' in data:
            kwargs = data['globals'].copy()
            # -p option overrides .yaml's global pattern.
            if options.pattern:
                kwargs['pattern'] = options.pattern
        else:
            kwargs = {}
        for arg in argslist:
            if isinstance(arg, dict):
                kwargs.update(arg)
                break
            args.append(arg)
        print("args =", args)
        print("kwargs =", kwargs)
        shot = Shot(*args, **kwargs)
        if options.showinfo:
            shot.add_filter("showdata")
        print(shot)
        q.put(shot)
        length += shot.get_duration()
    print("finished reading YAML")
    q.put(None)
    cat.start()
    print("Output:", options.output)
    if 'multiplexer' in data and 'filters' in data['multiplexer']:
        for filter in data['multiplexer']['filters']:
            muxer.add_filter(filter[0], **filter[1])
    if options.showinfo:
        muxer.add_filter("showdata", length=length)
    if options.output:
        start_time = time.perf_counter()
        muxer.write_to_files(*options.output)
        muxer.process.wait()
        elapsed_time = time.perf_counter() - start_time
        print("Elapsed time:", elapsed_time)
        if options.bell:
            # Play a 440Hz sine wave with 1760Hz beeps every second
            # for 6 seconds.
            player = subprocess.Popen(
                [
                    "ffplay",
                    "-f", "lavfi", "sine=440:4:d=6",
                    "-autoexit",
                ],
                stdin=subprocess.DEVNULL,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL,
                )
            player.wait()
    else:
        player = Player(muxer.mux())
        player.process.wait()


def new_movie(options):                          #{{{1
    print(
        YAML_TEMPLATE.format(
            pattern=options.pattern or DEFAULT_PATTERN,
            date=datetime.date.today().strftime("%Y-%m-%d"),
            name=os.getenv('LOGNAME', default="Your Name"),
            )
        )
#}}}


if __name__ == "__main__":
    try:
        # Main loop
        # Parse command line arguments.
        args = _parse_args()
        # Execute function defined by subcommand argument.
        args.func(args)
    except Exception as err:
        # Pretty printing of all exceptions as a neat error message.
        if err.__class__.__name__[0] in "AEIOUY":
            a = "an"
        else:
            a = "a"
        print("Aborted! There was {} {}:".format(a, err.__class__.__name__))
        message = textwrap.indent(err.args[0], "    ")
        print(message)
        sys.exit(1)
