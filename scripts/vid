#!/usr/bin/python3
# vim:cc=80:fdm=marker:fdl=0:fdc=1
#
# vid
# Copyright Â© 2013  Alexandre de Verteuil        {{{1
#
# This file is part of Vid.
#
# Vid is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# Vid is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#}}}


# Imports                                        {{{1
import os
import sys
import queue
import logging
import argparse

import yaml

from vid import *


# Global variables                               {{{1
#}}}


def _parse_args(args=None):                      #{{{1
    """Build argument parsers and parse arguments.

    If args list is provided, use it. Otherwise, parse sys.argv[1:].
    """
    args = args if args is not None else sys.argv[1:]
    # Create the top-level parser.
    parser = argparse.ArgumentParser(
        description="A CLI video editor.",
        )
    subparsers = parser.add_subparsers()

    # Create the parser for the "play" command.
    parser_play = subparsers.add_parser("play")
    parser_play.set_defaults(func=play)
    parser_play.add_argument("file_number", type=int)
    parser_play.add_argument("seek", type=float, nargs="?", default=0)
    parser_play.add_argument("duration", type=float, nargs="?", default=None)
    parser_play.add_argument("--output", "-o")

    # Create the parser for the "yaml" command.
    parser_yaml = subparsers.add_parser("yaml")
    parser_yaml.set_defaults(func=play_yaml)
    parser_yaml.add_argument("file_name", type=str)
    parser_yaml.add_argument("-s", "--showinfo", action="store_true")

    # Parse argument list, return gathered Namespace object.
    parsed_args =  parser.parse_args(args)
    if 'func' not in parsed_args:
        parser.error("Subcommand missing.")
    return parsed_args


def play(args):                                  #{{{1
    """Play the requested file using inv.utils objects."""
    logger = logging.getLogger(__name__+".play")
    print("Play file number", args.file_number)
    print("Start at", args.seek, end=" ")
    if args.duration:
        print("for", args.duration, "seconds.")
    else:
        print("until EOF.")
    try:
        shot = Shot(args.file_number).cut(args.seek, args.duration)
        shot.add_filter("showdata")
        shot.demux()
        muxer = Multiplexer(shot.v_stream, shot.a_stream)
        muxer.add_filter("showdata", length=shot.get_duration())
        if args.output:
            print("Writing to", args.output)
            try:
                muxer.write_to_files(args.output)
            except KeyError:
                logger.error(
                    "Invalid file extension. Please choose among {}.".format(
                        ", ".join(OUTPUT_FORMATS.keys())
                        )
                    )
                return
        else:
            player = Player(muxer.mux())
            player.process.wait()
        muxer.process.wait()
        shot.a_process.wait()
        shot.v_process.wait()
    except FileNotFoundError:
        logger.error("Couldn't find file number {}.".format(args.file_number))


def play_yaml(options):
    """Interpret YAML and play the result."""
    logger = logging.getLogger(__name__+".play_yaml")
    print("Play", options.file_name)
    try:
        # Create pipe to connect ConcatenateShots object with Multiplexer.
        # Closing the file descriptors is taken care of by these objects.
        fvr, fvw = os.pipe()
        vr = open(fvr, "rb")
        vw = open(fvw, "wb")
        far, faw = os.pipe()
        ar = open(far, "rb")
        aw = open(faw, "wb")
        q = queue.Queue()
        cat = ConcatenateShots(q, vw, aw)
        # mixer = AudioProcessing(ar)
        # mixer.mix("musique/foo.mp3")
        # Then use mixer.output_audio instead of ar.
        muxer = Multiplexer(vr, ar)
        cat.start()
        # Read YAML
        with open(options.file_name) as yaml_file:
            data = yaml.load(yaml_file)
        length = 0
        # Interpret YAML data, build the movie.
        for argslist in data['movie']:
            args = []
            kwargs = {}
            for arg in argslist:
                if isinstance(arg, dict):
                    kwargs = arg
                    break
                args.append(arg)
            print("args =", args)
            print("kwargs =", kwargs)
            shot = Shot(*args, **kwargs)
            print(shot)
            q.put(shot)
            length += shot.get_duration()
        print("finished reading YAML")
        q.put(None)
        if options.showinfo:
            muxer.add_filter("showdata", length=length)
        player = Player(muxer.mux())
        player.process.wait()
    finally:
        pass
#}}}


if __name__ == "__main__":
    # Main loop
    # Parse command line arguments.
    args = _parse_args()
    # Execute function defined by subcommand argument.
    args.func(args)
